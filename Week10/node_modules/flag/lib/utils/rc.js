var exec = require('child_process').exec;
var util = require('util');
var colors = require('colors');

colors.setTheme({
    info: 'green',
    error: 'red'
});

var CML = {
    HELP: {
        git: 'git --version',
        svn: 'svn --version'
    },
    CO: {
        git: 'git clone {path} {directory}',
        svn: 'svn checkout {path} {directory} --username {username} --password {password}'
    },
    ADD: {
        git: 'git add {files}',
        svn: 'svn add {files}'
    },
    COMMIT: {
        git: 'git commit -m "{msg}"',
        svn: 'svn commit -m "{msg}" --username {username} --password {password}'
    },
    PUSH: {
        git: 'git push -u origin {branch}',
        svn: ''
    },
    UPDATE: {
        git: 'git pull',
        svn: 'svn update'
    },
    MERGER: {
        git: 'git merge --no-ff {branch}',
        svn: 'svn merge'
    },
    RM: {
        git: 'git rm {files}',
        svn: 'svn rm {files}'
    },
    STATUS: {
        git: 'git status --porcelain',
        svn: 'svn status'
    }
};

function log(error, data) {
    //设计到权限的问题，如果反馈，是cmd还是界面
    var prefix = '版本控制软件信息提示：';
    data = prefix + data;
    console.log(error ? data.error : data.info);
}
/**
 * string replacement fn
 * @param temp 模版以{}占位
 * @param data 对应数据对象{key:value}
 * @returns {String} 处理后的字符串
 */
function template(temp, data) {
    return temp.replace(/{(\w*)}/g, function (m, key) {
        return data.hasOwnProperty(key) ? data[key] : "";
    });
}
/**
 * 返回格式化好的status信息
 * @param type
 * @param data
 * @returns {Array}
 */
function formatLog(type, data) {
    var s = data.trim().split(/\r?\n/),
        t = null,
        sa = [];
    for (var i = 0, l = s.length; i < l; i++) {
        t = s[i].trim().split(/\s+/);
        sa.push(t);
    }
    return sa;
}

module.exports = {
    /**
     * 检查是否已经安装版本控制软件
     * @param type{String} 版本控制软件类型 git/svn
     * @param callback 回调函数统一格式:错误对象error{Object}、操作信息data{String}
     */
    isInstallation: function (type, callback) {
        exec(CML.HELP[type], function (error, stdout, stderr) {
            var data = '已安装';
            if (error) {
                data = '未安装';
            }
            log(error, data);
            callback(error, data);
        });
    },
    /**
     * 获取代码
     * @param type
     * @param param 参数对象{
     *     path: 'git@xxx/def.git', //代码库路径
     *     branch: 'master',        //分支路径（可以是master）
     *     msg: 'update index',     //提交信息
     *     username: 'huaitian',    //用户名（svn）
     *     password: 'huaitian',    //密码（svn）
     *     directory：'assets/vm',   //checkout存放的路径，便于统一切换路径
     *     files: '.||file||fA fB ...||category'// add/rm的文件（可为多个，通过空格分隔）或者路径
     * }
     * @param callback
     */
    checkout: function (type, param, callback) {
        exec(template(CML.CO[type], param), function (error, stdout, stderr) {
            var data = stdout;
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    add: function (type, param, callback) {
        exec(CML.ADD[type], function (error, stdout, stderr) {
            var data = stdout;
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    remove: function (type, param, callback) {
        exec(CML.RM[type], function (error, stdout, stderr) {
            var data = stdout;
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    update: function (type, param, callback) {
        exec(CML.UPDATE[type], function (error, stdout, stderr) {
            var data = stdout;
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    merge: function (type, param, callback) {
        exec(template(CML.MERGER[type], param), function (error, stdout, stderr) {
            var data = '成功';
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    commit: function (type, param, callback) {
        exec(template(CML.COMMIT[type], param), function (error, stdout, stderr) {
            var data = '成功';
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    push: function (type, param, callback) {
        exec(template(CML.PUSH[type], param), function (error, stdout, stderr) {
            var data = '成功';
            if (error) {
                data = stderr;
            }
            log(error, data);
            callback(error, data);
        });
    },
    status: function (type, callback) {
        exec(CML.STATUS[type], function (error, stdout, stderr) {
            var data = stdout;
            if (error) {
                data = stderr;
            }
            callback(error, formatLog(type, data));
        });
    }
};

/*
 需求list：
 1.模块分rc（utils）和scm（apps）
 2.rc只做版本控制方面的事情，不做配置文件方面的事情，每个方法都需要配置参数对象，对底层做svn/git的适配

 尝试
 1.单元测试
 2.colors
 3.尝试https://github.com/aeo/svn-log-parser

 修改：
 0.首要目标是用户根据我们的配置能够正常的运行下来即可
 1.去掉tortoiseSVN --fix
 2.先检查是否安装git/svn --fix
 3.测试git的在window下cmd里直接运行（msysgit可以，但在cygwin里安装git就不可以了，因此建议在git运行的环境启动def，否则需要强制安装前者） --won't fix
 4.参数还是使用对象的形式 --fix
 5.检查下是否可以直接新开cmd窗口（后续补充）
 6.svn命令测试:checkout[-add][-delete][-update]-commit --fix
 7.在ubuntu和os下测试并编写测试用例 --doing

 进展：
 1.在windows下，cygwin对nodejs的stdin支持有问题，因此使用cmd，然后git使用msysgit即可，至于密码是否需要输入都可以（当然为了方便起见，可以reset ssh时，不输入密码即可）
 2.基本命令已完成，还剩merge
 3.是否考虑将add和rm做合并，只需要传递status放回的数据进行判断调用rm还是add（svn的删除只能通过rm）
 */