var Judge = {
	isStart: false,  //  a variable recording the condition of start
	isWin: false,  //  a variable recording the condition of winning
	duplicate: false  //  a variable in case of the duplication of the click on the start button
};

var blank = {
	blankX: 0,
	blankY: 0
};  //  two variables recording the position of the blank puzzle

var puzzle = new Array(4);
for (var i = 0; i < 4; i++) {
	puzzle[i] = new Array(4);
}
//  the array reording the puzzle generated by div

$(document).ready(function() {
	Init();
	start();
});

var initTile = function(i, j) {
	this.seq = i * 4 + j + 1;
	this.row = i + 1;
	this.column = j + 1;
	this.element = $("<div></div>");
	if (i * 4 + j != 15) {
		this.element.addClass("block puzzle row" + this.row + " column" + this.column);
		var xPosition = -j * 88;
		var yPosition = -i * 88;
		this.element.css("backgroundPosition", xPosition + "px " + yPosition + "px");
	} else {
		this.element.addClass("block row" + this.row + " column" + this.column);
		this.element.attr('id', "blank");
	}
}

function Init() {
	var node = $("#imgContent");
	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 4; j++) {
			var t = new initTile(i, j);
			node.append(t.element);
		}
	}
	Judge.isStart = false;
}

function start() {
	$("#StartButton").click(function() {
		Judge.isStart = true;
		Judge.duplicate = true;
		blank.blankX = 4;
		blank.blankY = 4;
		generateRandomPuzzle();
	});
}

function judgeSolve(a) {
	if (a.length == 0) return false;
	var sum = 0;
	for (var i = 0; i < 14; i++) {
		for (var j = i + 1; j < 15; j++) {
			if (a[i] < a[j]) sum++;
		}
	}
	return (sum % 2 == 0);
}  // ensure the puzzle generated that can be solved

function removePuzzle() {
    _.times(16, function() {
    	$(".block").first().remove();
    });
}

function generateRandomSequence() {
	var a = [];
    while (!judgeSolve(a)) {
    	a = [];
    	for(var i = 0; i < 15; i++) a.push(i);
		a.sort(function() {return 0.5 - Math.random()});
    	a.length = 15;
    }
    return a;
}

var tile = function(i, j) {
	this.seq = i * 4 + j + 1;
	this.row = i + 1;
	this.column = j + 1;
	this.element = $("<div></div>");
}

function generateRandomPuzzle() {
	var node = $("#imgContent");
	removePuzzle();
    generate(node);
	Judge.isStart = true;
	choose();
	afterWin();
	//  judge if wins
}

function generate(node) {
	var a = generateRandomSequence();
	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 4; j++) {
			var block = new tile(i, j);
			if (i == 3 && j == 3) {
				block.element.addClass("block row" + block.row + " column" + block.column);
				block.element.attr('id', "blank");
			} else {
				block.element.addClass("block puzzle row" + block.row + " column" + block.column);
				var xPosition = -(a[i * 4 + j] % 4) * 88;
				var yPosition = -(parseInt(a[i * 4 + j] / 4)) * 88;
				block.element.css("backgroundPosition", xPosition + "px " + yPosition + "px");
			}
			node.append(block.element);
			puzzle[i][j] = block.element;
		}
	}
}

function afterWin() {
	if (Judge.isWin) {
		alert("You Win!");
		Judge.isWin = false;
		Judge.isStart = false;
		Judge.duplicate = false;
	}
}

function searchBlank() {
	var find = false;
	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 4; j++) {
			if (puzzle[i][j].id === "blank") {
				blank.blankX = i + 1;
				blank.blankY = j + 1;
				find = true;
				break;
			}
			if (find == true) break;
		}
	}
}

function choose() {
	searchBlank();
	$(".block").each(function(){
		var that = $(this);
		that.click(function() {
            if (blank.blankX != 1 && $(puzzle[blank.blankX - 2][blank.blankY - 1]).attr("class") == that.attr("class")) moveDown();
            if (blank.blankX != 4 && $(puzzle[blank.blankX][blank.blankY - 1]).attr("class") == that.attr("class")) moveUp();
            if (blank.blankY != 4 && $(puzzle[blank.blankX - 1][blank.blankY]).attr("class") == that.attr("class")) moveRight();
            if (blank.blankY != 1 && $(puzzle[blank.blankX - 1][blank.blankY - 2]).attr("class") == that.attr("class")) moveLeft();
            if (Judge.isStart && !Judge.duplicate && check() && that.attr("id") != "blank") Judge.isWin = true;
        });
	});
}

function moveDown() {
	var property = $(puzzle[blank.blankX - 2][blank.blankY - 1]).css("backgroundPosition");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).css("backgroundPosition", property);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block puzzle row" + blank.blankX + " column" + blank.blankY);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "");
	blank.blankX--;
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "blank");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).removeAttr("style");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block row" + blank.blankX + " column" + blank.blankY);
}

function moveUp() {
	var property = $(puzzle[blank.blankX][blank.blankY - 1]).css("backgroundPosition");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).css("backgroundPosition", property);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block puzzle row" + blank.blankX + " column" + blank.blankY);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "");
	blank.blankX++;
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "blank");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block row" + blank.blankX + " column" + blank.blankY);
}

function moveRight() {
	var property = $(puzzle[blank.blankX - 1][blank.blankY]).css("backgroundPosition");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).css("backgroundPosition", property);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block puzzle row" + blank.blankX + " column" + blank.blankY);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "");
	blank.blankY++;
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "blank");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block row" + blank.blankX + " column" + blank.blankY);
}

function moveLeft() {
	var property = $(puzzle[blank.blankX - 1][blank.blankY - 2]).css("backgroundPosition");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).css("backgroundPosition", property);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block puzzle row" + blank.blankX + " column" + blank.blankY);
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "");
	blank.blankY--;
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("id", "blank");
	$(puzzle[blank.blankX - 1][blank.blankY - 1]).attr("class", "block row" + blank.blankX + " column" + blank.blankY);
}

function check() {
	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 4; j++) {
			var row = i + 1;
			var column = j + 1;
			if (i == 3 && j == 3) {
				if (puzzle[i][j].className != "block row" + row + " column" + column) return false;
			} else {
				if (puzzle[i][j].className != "block puzzle row" + row + " column" + column) return false;
			}
		}
	}
	return true;
}
